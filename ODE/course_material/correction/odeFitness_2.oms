import _file_.odeModel_1._


// Zombieland data
val dataFile = Val[File]

// Outputs
val fitness = Val[Double]


val fitnessTask =
    ScalaTask("""
        // Zombieland data
        val columns = dataFile.lines.drop(1).map(_.split(",")).toVector

        val realHumansWalking = columns.map(_(6).toDouble)
        val realHumansRunning = columns.map(_(0).toDouble)
        val realZombifiedWalking = columns.map(_(9).toDouble)
        val realZombifiedRunning = columns.map(_(3).toDouble)
    
        // Fitness calculation
        def fitnessCalc(real: Vector[Double], simu: Array[Double]) = {
            (real zip simu).map { case(r, s) => (r - s) * (r - s) }.sum
        }
        
        val fitHW = fitnessCalc(realHumansWalking, humansWalking)
        val fitHR = fitnessCalc(realHumansRunning, humansRunning)
        val fitZW = fitnessCalc(realZombifiedWalking, zombifiedWalking)
        val fitZR = fitnessCalc(realZombifiedRunning, zombifiedRunning)

        val fitness = fitHW + fitHR + fitZW + fitZR
    """) set (
        inputs += (humansWalking, humansRunning, zombifiedWalking, zombifiedRunning),
        inputs += (dataFile),
        outputs += (fitness),
    
        // Zombieland data
        dataFile := (workDirectory / "ZombielandData_1000repli.csv")
    )


model -- (fitnessTask hook display)